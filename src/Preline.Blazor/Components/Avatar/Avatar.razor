@namespace Preline.Blazor.Components
@inherits PrelineComponentBase

<div class="relative inline-block">
    @if (IsPlaceholder)
    {
        <span class="" @attributes="AdditionalAttributes">
            <svg class="size-full text-gray-300" width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                <rect x="0.62854" y="0.359985" width="15" height="15" rx="7.5" fill="white"></rect>
                <path d="M8.12421 7.20374C9.21151 7.20374 10.093 6.32229 10.093 5.23499C10.093 4.14767 9.21151 3.26624 8.12421 3.26624C7.0369 3.26624 6.15546 4.14767 6.15546 5.23499C6.15546 6.32229 7.0369 7.20374 8.12421 7.20374Z" fill="currentColor"></path>
                <path d="M11.818 10.5975C10.2992 12.6412 7.42106 13.0631 5.37731 11.5537C5.01171 11.2818 4.69296 10.9631 4.42107 10.5975C4.28982 10.4006 4.27107 10.1475 4.37419 9.94123L4.51482 9.65059C4.84296 8.95684 5.53671 8.51624 6.30546 8.51624H9.95231C10.7023 8.51624 11.3867 8.94749 11.7242 9.62249L11.8742 9.93184C11.968 10.1475 11.9586 10.4006 11.818 10.5975Z" fill="currentColor"></path>
            </svg>
        </span>
    }
    else if (IsInitials)
    {

        <span class="@Class" @attributes="AdditionalAttributes">@Initials</span>
    }
    else if (IsImage)
    {
        <img class="@Class" src="@Image" @attributes="AdditionalAttributes">
    }

    @ChildContent
</div>

@code
{
    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Parameter] public bool IsPlaceholder { get; set; }
    [Parameter] public string? Image { get; set; }
    [Parameter] public string? Initials { get; set; }

    [Parameter] public PlaceholderSizes Size { get; set; } = PlaceholderSizes.Medium;
    [Parameter] public AvatarVariants Variant { get; set; } = AvatarVariants.Solid;

    private bool IsImage => !string.IsNullOrEmpty(Image);
    private bool IsInitials => !string.IsNullOrEmpty(Initials);

    private string Class => new CssBuilder("rounded-full")
        .Add(SelectSize())
        .Add(SelectVariant(), IsInitials)
        .Add("inline-block overflow-hidden bg-gray-100", IsPlaceholder)
        .Add("inline-flex items-center justify-center text-sm font-semibold", IsInitials)
        .Add("inline-block", IsImage)
        .Add(AdditionalAttributes)
        .Build();

    private string SelectSize() => Size switch
    {
        PlaceholderSizes.Small => "size-6 text-xs",
        PlaceholderSizes.Large => "size-11 text-sm",
        PlaceholderSizes.ExtraLarge => "size-15.5 text-lg",
        _ or PlaceholderSizes.Medium => "size-9.5",
    };

    private string SelectVariant() => Variant switch
    {
        AvatarVariants.Soft => "bg-gray-100 text-gray-800 dark:bg-white/10 dark:text-white",
        AvatarVariants.Outline => "border border-gray-800 text-gray-800 dark:border-neutral-200 dark:text-white",
        AvatarVariants.White => "border border-gray-200 bg-white text-gray-800 shadow-2xs dark:bg-neutral-900 dark:border-neutral-700 dark:text-white",
        _ or AvatarVariants.Solid => "bg-gray-800 font-semibold text-white dark:bg-white dark:text-neutral-800",
    };

    public enum PlaceholderSizes
    {
        Small,
        Medium,
        Large,
        ExtraLarge
    }

    public enum AvatarVariants
    {
        Solid,
        Soft,
        Outline,
        White
    }
}